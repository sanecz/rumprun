#!/bin/sh
#
# Copyright (c) 2015 Martin Lucina.  All Rights Reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
# OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#

#
# rumpbake: script for final stage linking ("baking") of a unikernel image
#

: ${READELF:=readelf}

if [ "${RUMPRUN_WARNING_STFU}" != 'please' ]; then
	exec 3>&1 1>&2
	echo
	echo !!!
	echo !!! NOTE: rumpbake is experimental. syntax may change in the future
	echo !!!
	echo
	exec 1>&3 3>&-
fi

die()
{

	echo ">> ERROR: $*"
	exit 1
}

usage ()
{
	cat <<EOM
usage: rumpbake TARGET OUTPUT FILE [FILE ...]
       rumpbake list

When invoked the single argument "list", lists supported target boards.

Else, creates a rumprunnable unikernel:
	TARGET: rumprun board configuration to use.
	OUTPUT: output file name for the unikernel image.
	FILE: 	executable to bake.
EOM
	exit 1
}

nuketmpdir ()
{

	nukeme="${TMPDIR}"
	TMPDIR=''
	rm -rf ${nukeme}
}

ALLCONFIGS=
addconfig ()
{
	[ $# -ge 2 ] || { echo rumpbake.conf error; exit 1; }

	confname=$1
	toolchain=$2
	shift 2

	ALLCONFIGS="${ALLCONFIGS} ${confname}"
	eval TOOLCHAIN_${confname}=${toolchain}
	eval CONFIG_${confname}=\"$@\"
}

getbininfo ()
{

	# extract bake recipe
	notesect=.note.rumprun.bakerecipe
	tuple="$(readelf -p ${notesect} $1 2>/dev/null \
	    | sed -n 's/.*rumprun_tuple: //p')"
	[ -n "${tuple}" ] \
	    || die "Could not extract tuple from $1.  Not a rumprun binary?"
	tooldir="$(readelf -p ${notesect} $1 2>/dev/null \
	    | sed -n 's/.*rumprun_tooldir: //p')"
	[ -n "${tooldir}" ] \
	    || die "Could not extract tooldir from $1.  Not a rumprun binary?"
	mycc="$(readelf -p ${notesect} $1 2>/dev/null \
	    | sed -n 's/.*rumprun_backingcc: //p')"
	[ -n "${mycc}" ] \
	    || die "Could not extract cc from $1.  Not a rumprun binary?"
	mycflags="$(readelf -p ${notesect} $1 2>/dev/null \
	    | sed -n 's/.*rumprun_cflags: //p')"
	[ -n "${mycc}" ] \
	    || die "Could not extract cflags from $1.  Not a rumprun binary?"

	# check that all binaries are consistent
	[ "${RUMPBAKE_TUPLE:=${tuple}}" = "${tuple}" ] \
	    || die tuple mismatch in binary ingredients
	[ "${RUMPBAKE_APPTOOLDIR:=${tooldir}}" = "${tooldir}" ] \
	    || die tooldir mismatch in binary ingredients
	[ "${RUMPBAKE_CC:=${mycc}}" = "${mycc}" ] \
	    || die cc mismatch in binary ingredients
	[ "${RUMPBAKE_CFLAGS:=${mycflags}}" = "${mycflags}" ] \
	    || die cflgas mismatch in binary ingredients
}

APP_TOOLS_DIR=$(dirname $0)
CONF=${APP_TOOLS_DIR}/rumpbake.conf
if [ ! -f ${CONF} ]; then
	echo "rumpbake: error: Configuration file ${CONF} not found"
	exit 1
fi
. ${CONF}

TARGET="${1}"
if [ "${TARGET}" = "list" ]; then
	echo ${ALLCONFIGS} | xargs -n 1 echo
	exit 0
fi

OUTPUT="${2}"
[ $# -gt 2 ] || usage
shift 2

# We need readelf to extract the ELF note with the baking recipe.
# Just any readelf will do, but we need one.
type ${READELF} >/dev/null 2>&1 \
    || die 'Cannot find ${READELF}. Set $READELF env variable'
unset RUMPBAKE_CC
unset RUMPBAKE_TUPLE
unset RUMPBAKE_CFLAGS
unset RUMPBAKE_APPTOOLDIR

[ $# -le 8 ] || { echo '>> max 8 binaries supported currently' ; exit 1; }

# Santize the config argument passed in to remove shell
# metacharacters
config="$(echo ${TARGET} | sed -e 's/-/_/g' -e 's/[^A-Za-z0-9_]//g')"
for c in ${ALLCONFIGS}; do
	[ "$c" = "$config" ] && break
done
if [ "$c" != "$config" ]; then
	echo "rumpbake: error: unsupported config \"$config\""
	exit 1
fi

# Sets CONFIG to $(CONFIG_<name>) and CC to $(CC_<name>)
eval CONFIG="\${CONFIG_${config}}"
eval TOOLCHAIN="\${TOOLCHAIN_${config}}"

# Parse CONFIG, mapping each component to $LIBS_component and each resulting
# lib to -l$lib
LIBS="-lrumpkern_bmktc -lrumpvfs"
for component in ${CONFIG}; do
	for lib in $(eval echo \${LIBS_${component}}); do
		LIBS="${LIBS} -l${lib}"
	done
done

TMPDIR=$(mktemp -d /tmp/rumpbake.XXXXXX)
trap nuketmpdir 0 INT TERM

# Check if the file is a relocatable object produced by a rumprun toolchain.
# Create a temporary object with a unique "main"
objnum=1
allobjs=
for f in "$@"; do
	getbininfo ${f}

	${RUMPBAKE_APPTOOLDIR}/${RUMPBAKE_TUPLE}-objcopy		\
	    --redefine-sym main=rumpbake_main${objnum}			\
	    ${f} ${TMPDIR}/tmp${objnum}.obj
	allobjs="${allobjs} ${TMPDIR}/tmp${objnum}.obj"
	objnum=$((${objnum}+1))
done

# Final link using cc to produce the unikernel image.
${RUMPBAKE_CC} ${RUMPBAKE_CFLAGS}					\
    -specs=${RUMPBAKE_APPTOOLDIR}/${TOOLCHAIN}-specs-bake		\
    -Wl,--defsym=__RuMpRuN_baked__=0                                    \
    -Wl,--defsym=__RuMpRuN_platform_${c%_*}__=0                        \
    -o ${OUTPUT} ${allobjs} -Wl,--whole-archive ${LIBS} || exit 1

exit 0
